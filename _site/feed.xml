<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-12-07T18:24:48+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Yundal</title><subtitle>This is my amazing blog:)</subtitle><author><name>Yundal</name><email>susu12356@gmail.com</email></author><entry><title type="html">[운영체제] 02.프로세스와 스레드</title><link href="http://localhost:4000/operation-system" rel="alternate" type="text/html" title="[운영체제] 02.프로세스와 스레드" /><published>2024-10-24T00:00:00+09:00</published><updated>2024-10-24T00:00:00+09:00</updated><id>http://localhost:4000/process-and-thread</id><content type="html" xml:base="http://localhost:4000/operation-system"><![CDATA[<h1 id="프로세스와-스레드">프로세스와 스레드</h1>

<h3 id="1-프로세스">1. 프로세스</h3>
<p>: 메모리에 적재되어 실행중인 프로그램(일, task)이다.<br />
각각의 프로세스는 독립된 메모리 공간을 가지며 , 다른 프로세스와 메모리 공간을 공유하지 않는다.</p>

<table>
  <thead>
    <tr>
      <th>프로그램</th>
      <th>보조기억장치(SSD, 하드디스크)에 존재하는 실행되기를 기다리는 명령(코드)과 정적인 데이터의 묶음, 쉽게 말하면 코드가 작성되어 있는 파일</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>프로세스</td>
      <td>실행중인 프로그램</td>
    </tr>
    <tr>
      <td>프로세서</td>
      <td>명령어를 실행하는 장치 ex)CPU</td>
    </tr>
  </tbody>
</table>

<h4 id="프로그램이-프로세스가-되는-과정"><strong>프로그램이 프로세스가 되는 과정</strong></h4>
<hr />
<p>1️⃣ 메모리에 프로세스가 필요로 하는 <strong>재료</strong>들이 올라가야 한다.<br />
            <img src="../../assets/images/post/os-02-1.png" alt="Test Image" style="width:200px;" /><br />
        [프로세스 메모리 구조]</p>

<ul>
  <li>Stack 영역 [동적]<br />
    <ul>
      <li>함수 호출과 관계되는 지역변수, 매개변수 등을 저장한다.</li>
      <li>함수 호출 시 생성되고 함수가 끝날 시에 반환한다.</li>
    </ul>
  </li>
  <li>Heap 영역 [동적]<br />
    <ul>
      <li>프로그램 실핼 중에 필요에 의해 메모리를 동적으로 할당하는 영역이다.</li>
      <li>Heap에 할당된 메모리 블록은 프로그램이 직접 접근할 수 있는 변수 이름을 가지지 않는다.<br /> 예를 들어, <strong>전역 변수</strong>나 <strong>지역 변수</strong>처럼 특정 이름으로 직접 참조되지 않는다. 따라서 <strong>Heap 메모리에 접근</strong>하기 위해서는 <strong>해당 메모리의 주소 값</strong>이 필요하다. 주소 값에 의해서만 참조되고 사용되는 영역이다.</li>
    </ul>
  </li>
  <li>Data 영역<br />
    <ul>
      <li>
        <p>프로그램의 실행과 종료 과정에서 발생한 전역변수와 static 변수, 배열 등을 저장한다.</p>

        <table>
          <thead>
            <tr>
              <th>BSS(Block Started by Symbol) 영역</th>
              <th><strong>초기화되지 않은 전역 변수</strong>와 <strong>static 변수</strong>가 저장 <code class="language-plaintext highlighter-rouge">int a</code>;</th>
              <th>프로그램이 시작될 때 자동으로 0으로 초기화 된다.</th>
              <th>RAM에 저장</th>
              <th>-</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>GVAR 영역</td>
              <td><strong>초기화된 전역 변수</strong>와 <strong>static 변수</strong> <code class="language-plaintext highlighter-rouge">int a = 10;</code></td>
              <td>프로그램 시작 시 초기 값이 필요하기 때문에 초기 값을 ROM에 저장하고 실행중에는 RAM에 로드된다.</td>
              <td>ROM에 저장</td>
              <td>초기 값을 기록해야 되므로 BSS보다 상대적으로 큰 공간을 차지한다.</td>
            </tr>
          </tbody>
        </table>

        <p>📌 <strong>BSS와 GVAR(Data) 구분의 이유</strong></p>

        <p><strong>메모리 파일 크기의 효율성 때문이다.</strong> BSS 영역은 초기화 되지 않은 변수를 0으로 초기화 할 뿐 이기에 ROM에 저장되지 않고, 실행시점에 RAM에 메모리만 할당해주면 된다.</p>

        <p>반면, GVAR 영역은 초기 값을 기록해야 하기에 ROM에 저장하고, 프로그램이 실행될 때 RAM에 로드해야 한다. 여기서 초기화 되지 않은 데이터 까지 모두 ROM에 저장한다면, 프로그램의 크기가 커질 것이다.</p>
      </li>
    </ul>
  </li>
  <li>Text/Code 영역
    <ul>
      <li>실행 명령을 포함하는 코드들이 들어가는 부분으로 컴파일한 프로그램(기계어)가 저장된다.</li>
      <li>읽기 전용이다 .
<br /><br /></li>
    </ul>
  </li>
</ul>

<p>2️⃣ 해당 프로세스에 대한 정보를 담고 있는 <strong>PCB블럭이 프로세스 생성 시 함께 만들어진다.</strong></p>

<h4 id="프로세스-제어-블록pcb-process-control-block"><strong>프로세스 제어 블록(PCB, Process Control Block)</strong><br /></h4>
<hr />
<p>운영체제는 프로세스를 관리하기 위해 모든 프로세스의 중요한 정보를 PCB에 가지고 있다.<br />
            <img src="../../assets/images/post/os-02-2.jpeg" alt="Test Image" style="width:200px;" /><br />
        [PCB에 담기는 주요 정보]</p>

<ol>
  <li>프로세스 정보
    <ul>
      <li>pid : <strong>(Process ID :</strong> 프로세스 고유 식별자.</li>
      <li>상태정보 : <code class="language-plaintext highlighter-rouge">new</code>, <code class="language-plaintext highlighter-rouge">ready</code>, <code class="language-plaintext highlighter-rouge">running</code>, <code class="language-plaintext highlighter-rouge">waiting</code>, <code class="language-plaintext highlighter-rouge">terminated</code></li>
    </ul>
  </li>
  <li>레지스터 정보
    <ul>
      <li>CPU 내부의 데이터 저장 공간으로 CPU가 컨텍스트 스위칭을 할 때, 현재 실행 중이던 프로세스의 레지스터 값을 PCB에 저장한다. 다른 프로세스가 실행을 마치고 돌아올 때, PCB에 저장된 레지스터 값을 복원하여 중단된 시점 이후 부터 다시 작업을 이어갈 수 있도록 한다.</li>
    </ul>
  </li>
  <li>메모리 관리 정보
    <ul>
      <li>프로세스가 사용하는 <strong>코드, 데이터, 힙, 스택 영역의 주소 정보</strong>가 포함된다.</li>
      <li>운영체제는 이 정보를 통해서 프로세스가 사용하는 메모리 영역을 추적하고 관리한다.</li>
    </ul>
  </li>
  <li>입출력 정보 및 파일 관리 정보
    <ul>
      <li>해당 프로세스가 사용하는 파일 핸들이나 입출력 장치에 대한 정보이다.</li>
      <li>프로세스 종료 시, 이 정보를 이용해 프로세스가 사용하던 파일이나 자원을 정리한다.</li>
    </ul>
  </li>
</ol>

<h4 id="프로세스-상태">프로세스 상태</h4>
<hr />
<p><img src="../../assets/images/post/os-02-3.jpeg" alt="Test Image" style="width:500px;" /><br /></p>

<ul>
  <li>New (생성 상태)
    <ul>
      <li>프로그램이 실행을 요청하여 프로세스가 생성된 상태이다.</li>
      <li>운영체제는 이 생성된 프로세스를 ready 상태로 전환하기 위해서 메모리에 적재한다.</li>
    </ul>
  </li>
  <li>Ready (준비 상태)
    <ul>
      <li>메모리에 적재된 상태로, 프로세서의 할당을 기다리는 상태이다.</li>
      <li>여러 프로세스가 ready 상태에 있을 수 있고, 스케줄러가 어떤 프로세스에 CPU를 할당할 지 결정한다.</li>
    </ul>
  </li>
  <li><strong>Running</strong> (실행 상태)
    <ul>
      <li>프로세서 할당을 받아 실제로 실행되는 상태이다.</li>
      <li>CPU에서 명령어를 수행하며 계산 작업 등을 진행한다.</li>
    </ul>
  </li>
  <li><strong>Waiting</strong> (대기 상태)
    <ul>
      <li>프로세스가 실행 도중 입출력(I/O) 작업을 하거나 특정 이벤트가 발생하면 waiting 상태로 전환되어 기다리는 상태이다.</li>
      <li>작업이 완료되면, 다시 ready상태로 가서 프로세서 할당을 기다린다.</li>
    </ul>
  </li>
  <li><strong>Terminated</strong> (종료 상태)
    <ul>
      <li>프로세스의 작업이 모두 완료되거나, 강제로 중단되면 종료 상태가 된다.</li>
      <li>프로세스는 더 이상 CPU나 메모리를 사용하지 않고, <strong>OS에 의해 자원이 해제된다.</strong></li>
    </ul>
  </li>
</ul>

<h4 id="프로세스-스케줄링">프로세스 스케줄링</h4>
<hr />
<p>: CPU가 다음에 어느 프로세스를 실행할 지 결정하는 것으로 운영체제가 각 프로세스에 CPU 자원을 어떻게 할당할 것인지에 대한 것이다.</p>

<p>프로세스 스케줄링은 프로세스 큐(process quene)를 이용해서 관리한다. 프로세스 큐에는:</p>

<ul>
  <li>준비 큐:  프로세스들이 대기하는 큐
    <ul>
      <li>CPU 할당을 대기</li>
    </ul>
  </li>
  <li>실행 큐: CPU를 사용하고 있는 프로세스가 있는 곳
    <ul>
      <li>항상 1개</li>
    </ul>
  </li>
  <li>대기 큐: 특정 이벤트를 기다리거나 입출력 작업이 완료될 때까지 대기하는 프로세스들의 큐
    <ul>
      <li>입출력 작업 요청 프로세스가 입출력 작업이 완료될 때 까지 여기서 대기한다.</li>
    </ul>
  </li>
</ul>

<p><img src="../../assets/images/post/os-02-4.jpeg" alt="Test Image" style="width:500px;" /><br /></p>

<blockquote>
  <p>새로운 프로세스 in → 준비 큐 대기 → CPU 할당 후</p>

  <ul>
    <li>입출력 요청 시 : 입출력 작업 진행 → 대기큐에서 대기 → 완료 후 준비 큐 대기</li>
    <li>CPU할당 시간 만료 시 :  준비 큐 대기</li>
    <li>자식 프로세스 생성(fork)시 : 자식 프로세스 작업완료 대기 or 부모프로세스 작업 실행 → 준비 큐 대기</li>
    <li>인터럽트 발생 시 : 인터럽트 처리 → 준비 큐에서 CPU 할당 대기<br /></li>
  </ul>
</blockquote>

<p><br /></p>

<h3 id="스레드thread---경량화된-프로세스">스레드(Thread) :  경량화된 프로세스</h3>
<hr />

<p><img src="../../assets/images/post/os-02-5.png" alt="Test Image" style="width:500px;" /><br /></p>

<p>출처: <a href="https://www.youtube.com/watch?v=1grtWKqTn50">https://www.youtube.com/watch?v=1grtWKqTn50</a></p>

<p><strong>스레드란?</strong></p>

<hr />

<p>: 하나의 프로세스 내에 실행되는 실행단위이다.</p>

<blockquote>
  <p><strong>스레드는 경량화된 프로세스</strong><br /></p>
</blockquote>

<p>스레드는 하나의 프로세스 안에서 여러 작업을 동시에 수행하기 위해 나뉜 <strong>경량 프로세스(Lightweight Process)라고 볼 수 있다.</strong> 
위 사진과 같이 하나의 프로세스 안에 다수의 스레드가 있을 때 공유되는 자원이 있기 때문이다. 여러 스레드는 프로세스의 메모리 구조 중에 code, data, heap 영역을 공통된 자원으로 사용하고, 각 스레드는 고유한 Stack을 가진다. 공유된 자원이 있기 때문에 컨텍스트 스위칭이 시 캐싱 적중률이 올라간다.</p>

<p><strong>스레드 관리 방식과 성능 이슈</strong></p>

<hr />

<p><strong>사용자 레벨 스레드 (User Thread)</strong><br /></p>
<ul>
  <li>애플리케이션 수준(응용프로그램 내부)에서 생성되고 관리되는 스레드이다.
    <ul>
      <li>응용프로그램 라이브러리 호출로 스레드를 생성한다(<code class="language-plaintext highlighter-rouge">Pthreads</code> 등).</li>
    </ul>
  </li>
  <li>운영체제에 의해 인식되지 않는다. 즉, 해당 스레드가 실행 중인지 블록 상태인지 운영체제가 인지하지 못한다.
    <ul>
      <li>만약, 사용자 레벨 스레드 블록 상태가 되면 운영체제는 사용자 레벨 스레드 개별적으로 인식하지 않으므로 전체 프로세스가 블록된 것으로 처리한다. 결과적으로 다른 스레드들이 실제로는 실행 가능한 상태임에도 불구하고 실행되지 않게 되고 이는 성능 저하를 가져올 수 있다.</li>
    </ul>
  </li>
</ul>

<p><strong>커널 레벨 스레드(Kernel Thread)</strong></p>
<ul>
  <li>운영체제의 커널에서 직접 생성되고 관리되는 스레드이다.
    <ul>
      <li>응용프로그램은 시스템 콜로 커널 레벨 스레드 생성한다.</li>
    </ul>
  </li>
  <li>커널이 스레드의 생성, 스케줄링, 상태전환을 모두 관리한다.
    <ul>
      <li>각 스레드의 상태를 커널이 인지하므로, 하나의 스레드가 블록 상태(블로킹)에 빠져도 다른 스레드는 계속 실행될 수 있다.<br /><br /></li>
    </ul>
  </li>
</ul>

<p><strong>성능 저하 해결 방법</strong></p>

<hr />

<ul>
  <li>문제점
    <ul>
      <li><strong>사용자 레벨 스레드</strong>의 경우, 하나의 스레드가 블록되면 <strong>전체 프로세스가 정지</strong>하는 문제가 발생한다.</li>
    </ul>
  </li>
  <li>해결책
    <ul>
      <li>하이브리드 스레드 : 사용자 레벨 스레드와 커널 레벨 스레드의 장점을 결합한 방식이다.</li>
      <li>커널에 의해 관리되는 커널 스레드 위에서 여러 사용자 스레드가 동작하는 방식이다.</li>
      <li>블로킹 문제를 완화하면서도 효율적인 스레드 관리가 가능하다.<br /><br /></li>
    </ul>
  </li>
</ul>

<blockquote>
  <p><strong>💡 스레드의 병렬성 향샹은 어떻게 할 수 있을까</strong><br />
여러 작업을  동시에 수행하기 위해서 함수 단위로 스레드를 추가할 수 있다.</p>
  <ul>
    <li>함수 = 스레드 분할 단위</li>
    <li>스레드 분할 시점 = 새로운 함수가 실행되는 순간</li>
  </ul>

  <p><br /></p>
</blockquote>

<p><strong>스레드의 생성, 종료, 및 조인 메커니즘</strong></p>

<hr />

<p><strong>스레드 생성</strong></p>

<ul>
  <li>프로세스가 생성 → 운영체제에 의해 자동으로 main 스레드 생성</li>
  <li>시스템 콜 혹은 라이브러리 함수를 호출하여 새로운 스레드 생성 가능</li>
</ul>

<p><strong>스레드 종료</strong></p>

<ul>
  <li>스레드만 종료하는 함수 호출 시 해당 스레드만 종료한다. 예) pthread_exit()</li>
</ul>

<p><strong>스레드 조인</strong></p>

<ul>
  <li>스레드가 다른 스레드가 종료할 때 까지 대기 → 이후에 join으로 만나게 만든다.
    <ul>
      <li>주로 부모 스레드가 자식 스레드의 종료를 대기하는 경우이다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<p>→ 필요할 때 마다 스레드 생성과 종료 작업도 부하가 될 수 있기에 스레드를 무한정 만들어 사용할 수 없다. 그래서 나온 것이 스레드 풀이다. 
<br /></p>

<p><strong>스레드 풀</strong></p>

<hr />

<p>스레드 풀은 미리 생성된 sub스레드의 그룹이다. 대기하고 있다가 요청을 받으면 스레드를 매니저가 깨워서 작업 처리한다.</p>

<p>👍🏻 <strong>장점</strong></p>
<ul>
  <li>스레드 생성과 종료 작업에서 발생하는 부하가 줄어 성능 향상</li>
  <li>스레드 새로 생성 하는 것 보다 빠름</li>
  <li>스레드 수 제한 설정 가능</li>
  <li>주기적인 작업 처리 시, 유연한 작업 진행 가능</li>
</ul>

<p><br /></p>

<h3 id="컴퓨터-시스템의-병렬성과-동시-실행"><strong>컴퓨터 시스템의 병렬성</strong>과 <strong>동시 실행</strong></h3>
<hr />
<p>사용되는 단위(프로세스, 스레드 등)와 실행 방식에서 차이가 있다.</p>

<ol>
  <li>
    <p><strong>멀티 프로그래밍 (Multi-programming)</strong></p>

    <p>: CPU가 최대한 쉬지 않고 계속 사용되도록 여러 프로그램이을 메모리에 모두 적재하여 여러 프로그램을 교대로 실행하는 방식이다.</p>

    <ul>
      <li>운영체제는 하나의 프로그램이 입출력 작업을 수행하는 동안 다른 프로그램에게 CPU를 할당한다.</li>
    </ul>
  </li>
  <li>
    <p><strong>멀티 태스킹(Multi-tasking)</strong></p>

    <p>: 시분할 방식으로 한 CPU가 여러 프로세스를 짧은 시간 단위로 교대로 실행하여 마치 여러 작업이 동시에 수행되는 것처럼 보이도록 하는 것이다.</p>

    <ul>
      <li>프로세스 단위로 작업을 분할한다 .</li>
    </ul>
  </li>
  <li>
    <p><strong>멀티 스레딩(Multi-threading)</strong>&lt;</p>

    <p>하나의 프로세스 내에서 여러 스레드가 동시에 실행되는 방식이다.</p>

    <ul>
      <li>실행단위는 프로세스일 수도 있고 스레드가 될 수도 있다. 만약 프로세스가 다수의 스레드로 구분되어 있다면 실행단위는 스레드가 되고, 그렇지 않다면 프로세스 그 자체가 된다. (해당 프로세스 내 단 하나의 스레드)</li>
      <li>예시
        <ul>
          <li>게임 프로그램에서 다음과 같은 작업이 각각 스레드로 실행된다 :
            <ul>
              <li>화면변경 :브라우저 창 움직이기 동시에 화면 내부 업데이트</li>
              <li>스펠링체크 : 문서 입력중 + 바로바로 빨간 줄 표시</li>
              <li>데이터통신 : 네트워크로 서버에서 데이터 가져오기 → 멀티스레드가 없다면 화면이 멈춤</li>
              <li>네트워크 응답</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>스레드 끼리 공유된 자원을 가지고 있기에 긴밀하게 연결된 관계이다. 때문에 동기화 작업이 중요하고, 공유 자원 관리를 해주어야 한다. 하지만 메모리를 효율적으로 사용할 수 있고, 통신 비용이 절감된다.</li>
    </ul>
  </li>
  <li>
    <p><strong>멀티 프로세싱(Multi-processing)</strong></p>

    <p>멀티코어 프로세서가 등장하면서 여러 코어를 활용해 병렬 처리 성능을 극대화 할 수 있는 방법으로 등장했다. 여러 CPU 또는 코어를 사용하여 단순히 여러 작업을 교대로 실행하는 것이 아니라, 실제로 동시에 여러 프로세스를 실행하는 방식이다.</p>

    <p><img src="../../assets/images/post/os-02-6.png" alt="Test Image" style="width:500px;" /><br /></p>

    <ul>
      <li>독립적인 프로세스들이 동시에 여러 개를 실행하는 것으로 시스템 성능 높일 수 있다.</li>
      <li>각 프로세스는 독립적이고, IPC를 통해서 통신한다.</li>
      <li>독립적이기에 동기화 작업에 신경을 많이 쓰지 않아도 된다.</li>
      <li>개별적 메모리를 차지하기에 자원을 소모한다.</li>
      <li>컨텍스트 스위칭 비용이 크다.</li>
    </ul>

    <blockquote>
      <dl>
        <dt><strong>멀티코어 (Multi-core)</strong></dt>
        <dd>
          <p>하나의 물리적 CPU 칩에 여러 개의 <strong>코어(처리장치)</strong>가 포함된 구조이다. 각 코어는 독립된 연산 유닛으로 서로 다른 작업을 병렬로 실행할 수 있다.</p>
        </dd>
      </dl>

      <ul>
        <li>멀티코어는 멀티프로세싱을 가능하게 하는 하드웨어 기술이다.</li>
      </ul>

    </blockquote>
  </li>
</ol>]]></content><author><name>Yundal</name><email>susu12356@gmail.com</email></author><category term="operating-system " /><summary type="html"><![CDATA[프로세스와 스레드]]></summary></entry><entry><title type="html">[컴퓨터구조] 1.컴퓨터의 구성</title><link href="http://localhost:4000/architecture/system" rel="alternate" type="text/html" title="[컴퓨터구조] 1.컴퓨터의 구성" /><published>2024-10-14T00:00:00+09:00</published><updated>2024-10-14T00:00:00+09:00</updated><id>http://localhost:4000/architecture/computer-system</id><content type="html" xml:base="http://localhost:4000/architecture/system"><![CDATA[<h3 id="컴퓨터-시스템">컴퓨터 시스템</h3>
<hr />
<p>컴퓨터 시스템은 개념적으로는 다음 3가지로 구성되었다고 볼 수 있다:</p>
<ul>
  <li>하드웨어</li>
  <li>소프트웨어</li>
  <li>펌웨어</li>
</ul>

<h4 id="1-하드웨어hardware"><strong>1. 하드웨어(hardware)</strong></h4>
<hr />
<p>전기적인 신호로 구성된 정보 즉, 데이터를 이동하거나 처리하는 물리적인 실체를 의미한다. 
외관과 용도 막론하고 컴퓨터를 이루는 핵심 부품은 크게 다르지 않다. 주로 CPU, 기억장치, 주변장치(CPU와 메모리를 제외한 나머지)로 구성된다. 각 구성요소들은 시스템 버스로 연결되어 있으며, 하드웨터의 품질은 컴퓨터의 정보 처리 능력을 결정한다.</p>

<p><img src="/assets/images/post/ca-01-1.png" alt="ca-01-1" /></p>

<h4 id="11-하드웨어-구성요소">1.1 하드웨어 구성요소</h4>
<hr />
<h5 id="01-cpucentral-processing-unit">01. CPU(Central Processing Unit)</h5>

<p>: 모든 컴퓨팅 장치의 두뇌 역할을 한다. 운영체제 및 애플리케이션을 시행하는데 필요한 모든 컴퓨팅 작업을 처리한다. CPU는 메모리에서 명령을 가져와 필요한 작업을 수행한 다음 출력을 다시 메모리로 보낸다.</p>

<h6 id="cpu의-발전">CPU의 발전</h6>

<p>과거에는 CPU가 여러 개의 부품으로 나누어져서 작동했다. <strong>마이크로프로세서</strong> 기술이 발전하면서, 이런 역할을 모두 하나의 작은 칩(IC) 안에 넣을 수 있게 되었다. <br />
결과적으로 컴퓨터가  작아지면서 책상에 올려놓을 수 있는 크기의 개인용 컴퓨터를 개발할 수 았었다. 1970년대 후반과 1980년대 초반에 등장한 Apple II나 IBM PC 같은 초기 개인용 컴퓨터의 출현으로 이어졌다.</p>

<p>현대의 프로세서는 마트폰 및 태블릿과 같은 모바일 디바이스들이 등장하면서 전력 효율성이 중요해졌다. 따라서 이를 위한 저전력 및 에너지 효율적인 CPU를 개발하고 있다.</p>

<h6 id="cpu의-구성요소">CPU의 구성요소</h6>
<ul>
  <li>
    <p><strong>제어장치</strong><br />
  명령 처리를 관리하고 CPU 내부 및 다른 컴퓨터의 구성요소들 간의 데이터 흐름을 조정한다. 
  즉, <strong>컴퓨터 시스템의 각 구성 요소들이 올바르게 동작하도록</strong> 필요한 작업을 다른 CPU 구성 요소에 지시하는 역할을 한다. 지시하는 과정은 다음과 같다:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>  **1️. 명령어 가져오기(Fetch**) : 메모리에서 프로그램의 명령어를 하나씩 가져온다.
  **2️. 명령어 해석(Decode)** :  그 명령이 무엇을 의미하는지 해석한다. 
  ⇒ 이를 명령어 사이클이라고 한다. 
  **3️. 명령 실행(Execute)** : 명령에 따라 CPU와 다른 장치들에게 어떤 작업을 해야 할지 지시한다. 예 ) 데이터 이동, 계산 수행
  **4️. 결과 저장** : 실행 결과를 다시 메모리에 저장하거나 다음 작업으로 넘긴다.
  {: .notice--info} 
    
  → 제어장치가 이 과정들을 지휘한다고 보면된다. 
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <p>또한, 제어 장치는 클럭 신호를 받아 그 신호에 맞춰 명령어 처리의 각 단계를 <strong>동기화</strong> 한다.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>  **클럭신호란 ? **&lt;br/&gt;
  CPU 안에서 일정한 속도로 반복적으로 발생하는 전기적 신호이다.  시계가 ‘틱, 톡’하는 것처럼,  “틱틱”하는 리듬을 일정한 간격으로 제공하면서 컴퓨터가 작업을 언제 시작하고, 언제 끝낼지를 알려주는 역할을 한다.&lt;br/&gt;&lt;br/&gt;
  컴퓨터는 위에 말한 4가지 과정을 거쳐 명령을 처리하는데, 제어장치는 그 단계들이 클럭 신호에 맞춰 정확한 순서로 실행되도록 조율하는 역할을 한다. 
  예를 들어, 클럭 신호가 ‘틱’ 할 때 명령어를 가져오고, ‘톡’ 할 때 그 명령어를 해석한다. &lt;br/&gt;&lt;br/&gt;
  클럭의 속도&lt;br/&gt;
      ◦ 클럭 신호의 속도는 주파수로 표현되는데, 주파수는 1초에 클럭이 몇 번 진동하는지를 나타낸다. 이를 헤르츠(Hz)단위로 측정하며,  CPU에서 실행할 수 있는 초당 명령 수를 결정한다. 1GHz 는 1초에 10억번의 클럭 사이클이 발생한다는 의미이다.&lt;br/&gt;&lt;br/&gt;
      ◦ 주파수가 높을수록, 클럭 신호의 속도가 빠르다는 의미이며, 이는 더 많은 명령을 빠르게 처리할 수 있다.
  {: .notice--info} 
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <dl>
      <dt>연산장치(ALU, Arithmetic Logic Unit)<br /></dt>
      <dd>컴퓨터의 수학적 계산과 논리적 연산을 처리하는 장치이다.</dd>
    </dl>

    <ul>
      <li>기본 산술 연산<br />
        <ul>
          <li>더하기, 빼기, 곱하기, 나누기</li>
        </ul>
      </li>
      <li>논리 연산(<em>AND</em>, <em>OR</em>, <em>NOT</em>)
        <ul>
          <li>두 값이 같은지(=), 더 큰지(&gt;) 혹은 더 작은지(&lt;)를 비교하거나 <em>AND</em>, <em>OR</em>, <em>NOT</em>과 같은 논리 연산을 처리한다.</li>
        </ul>
      </li>
      <li>비트연산
        <ul>
          <li>두 값의 이진수 형태를 비교한다.<br /><br /></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <dl>
      <dt>레지스터(Register)<br /></dt>
      <dd>CPU 내부에 있는 소형 고속 저용량 저장 장치이다.</dd>
    </dl>

    <ul>
      <li>즉시 저장
        <ul>
          <li>CPU가 데이터를 처리할 때, 필요한 정보를 일시적으로 저장해야 할 때, 즉시 레지스터로 저장할수 있다.</li>
        </ul>
      </li>
      <li>저용량
        <ul>
          <li>빠르게 작동하기 위해서 용량이 작다 .보통 몇 비트 ~ 수십 비트 정도 크기의 데이터를 저장할 수 있다.</li>
        </ul>
      </li>
      <li>고속
        <ul>
          <li>CPU와 바로 연결되어 있다. 따라서 메모리에 접근하여 데이터를 불러오는 것보다 훨씬 빠르다.</li>
        </ul>
      </li>
      <li>종류
        <ul>
          <li>데이터 레지스터 :  연산장치가 연산을 수행할 때 필요한 숫자나 정보를 저장한다.</li>
          <li>명령어 레지스터(IR, Instructioin Register) : 현재 실행 중인 명령어를 저장한다. CPU는 IR에서 명령을 읽고 해석한다.</li>
          <li>주소 레지스터(MAR, Memory Address Register) : 메모리에서 데이터을 읽어오거나 데이터를 쓸(write) 때, 해당 메모리의 주소를 저장한다.</li>
          <li>누산기(ACC, Accumulator) : 특수 레지스터로 연산장치가 계산을 끝낸 결과를 누산기에 저장한다.<br /><br /></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>CPU 내부 버스</p>

    <p><img src="/assets/images/post/ca-01-2.png" alt="ca-01-2" /></p>

    <p>CPU 내부에서 데이터를 주고 받는 연결통로이다. 즉, CPU 내부의 여러 부품들이 서로 <strong>소통</strong>할 수 있게 해주는 고속 통신로이다. 실제로는 여러 개의 전성 또는 회로로 이루어져있다. 버스가 얼마나 빠르게 데이터를 전달할 수 있느냐에 따라 CPU 처리속도가 결정된다.</p>

    <p>버스 종류<br /></p>
    <ul>
      <li>
        <dl>
          <dt><strong>데이터 버스(Data Bus)</strong><br /></dt>
          <dd>실제 데이터를 전달하는 통로이다. CPU가 메모리에 접근할 때, 데이터를 주고받는 통로가 이 데이터 버스이다. [양방향]</dd>
        </dl>
      </li>
      <li>
        <dl>
          <dt><strong>주소 버스(Address Bus)</strong><br /></dt>
          <dd>메모리나 입출력 장치의 주소를 전달한다. 앞서 MAR에서 잠깐 언급했듯, CPU는 메모리에서 필요한 데이터를 읽거나 쓴다. 이 때 그 데이터 저장된 위치가 필요한데, 이 주소 버스가 CPU가 어디로 가야할 지 알려주는 역할을 한다. [일방향]</dd>
        </dl>
      </li>
      <li>
        <dl>
          <dt><strong>제어 버스(Control Bus)</strong><br /></dt>
          <dd>명령어와 상태 신호를 전달한다. CPU가 다른 장치과 통신할 때, 데이터와 주소만 주고는 것이 아니라 무엇을 할지에 대한 정보도 필요하다. 예를 들어, 데이터를 읽을 지, 쓸 지 혹은 장치가 준비가 된 상태인지 등을 제어버스를 통해 전달한다. [양방향]</dd>
        </dl>
      </li>
    </ul>
  </li>
</ul>

<h4 id="02-주기억장치란main-memory">02. 주기억장치란(Main Memory)</h4>
<hr />
<p>: 데이터를 저장하고 필요한 정보를 CPU가 빠르게 접근할 수 있도록 해주는 장치로 크게 RAM(Random Access Memory)과 ROM(Read Only Memory)이 있다. 메모리라는 용어는 보통 RAM를 지칭한다.</p>

<h6 id="ramrandom-access-memory">RAM(Random Access Memory)</h6>
<p>: 휘발성 메모리로 CPU가 데이터를 즉시 처리할 수 있도록 임시로 저장하는 곳이다.</p>
<ul>
  <li>SRAM(Static RAM)</li>
  <li>DRAM(Dynamic RAM)</li>
</ul>

<h6 id="romread-only-memory">ROM(Read Only Memory</h6>
<p>: 비휘발성 메모리로, 컴퓨터가 부팅될 때 필요한 기본적인 시스템 정보를 저장하는 장치이다.<br /><br /></p>

<h4 id="03-보조-기억장치secondary-memory란">03. 보조 기억장치(Secondary Memory)란?</h4>
<hr />
<p>앞서 언급한 주기억장치는 휘발성 메모리로 전원이 꺼지면, 데이터가 사라지고. 가격이 비싸기에 용량이 작다. 이를 보완하여 용량이 크고, 비휘발성인 저장 장치를 만들었는데, 이를 <strong>보조기억장치</strong>라고 한다.</p>

<p>보조기억장치 종류에는 : <br /></p>
<ul>
  <li>하드디스크</li>
  <li>SSD</li>
  <li>CD-ROM</li>
</ul>

<h4 id="04-입출력장치">04. 입출력장치</h4>
<hr />
<p>: 컴퓨터 외부에 연결되어 컴퓨터 내부와 정보를 교환하는 장치를 의미한다.</p>

<p>입출력 장치 종류에는 : <br /></p>
<ul>
  <li>마이크</li>
  <li>스피커</li>
  <li>프린터</li>
  <li>마우스</li>
  <li>키보드<br /></li>
</ul>

<p class="notice--warning"><strong>QUESTION</strong><br />
Q. 보조기억장치도 컴퓨터 외부에 연결되어 있으면서 내부와 정보를 교환하는데, 그렇다면 보조기억장치도 입출력장치라고 할 수 있지 않나요?<br />
A. 보조기억장치와 입출력장치를 ‘컴퓨터 주변에 붙여있는 장치’라는 의미에서 주변장치라 통칭하기도 한다. “보조기억장치는 입출력장치에 비해 메모리를 보조하는 역할을 수행한다.”정도로 이해하자!</p>

<h4 id="2-소프트웨어">2. 소프트웨어</h4>
<hr />
<p>컴퓨터 하드웨어가 작동하도록 명령을 내리는 프로그램과 데이터의 집합이다. 쉽게 말해서 컴퓨터를 움직이게 하는 설계도이자 명령어이다.</p>

<h4 id="시스템-소프트웨어-system-software">시스템 소프트웨어 (System Software)</h4>
<ul>
  <li>운영체제와 같이 하드웨어를 관리하고 다른 소프트웨어가 동작할 수 있도록 환경을 제공한다.
    <ul>
      <li>Windows, macOS, Linux, Android</li>
    </ul>
  </li>
</ul>

<h4 id="응용-소프트웨어-application-software">응용 소프트웨어 (Application Software)</h4>
<ul>
  <li>사용자가 특정 작업을 수행하도록 도와주는 소프트웨어이다.
    <ul>
      <li>웹 브라우저(Chrome), 워드 프로세서(MS Word), 게임, 메신저 등</li>
    </ul>
  </li>
</ul>

<h4 id="미들웨어-middleware">미들웨어 (Middleware)</h4>
<ul>
  <li>시스템 소프트웨어와 응용 소프트웨어 사이에서 <strong>데이터를 연결</strong>하고 <strong>호환성을 제공</strong>하는 소프트웨어이다.
    <ul>
      <li>데이터베이스 미들웨어, 메시지 큐</li>
    </ul>
  </li>
</ul>

<h4 id="03펌웨어">03.펌웨어</h4>
<hr />
<p>하드웨어의 동작을 제어하는 소프트웨어로, 하드웨어 내부에 내장되어 있다. 소프트웨어와 하드웨어의 <strong>중간 역할</strong>을 수행하여 <strong>하드웨어와 소프트웨어가 원활하게 동작</strong>할 수 있도록 돕는다. 하드웨어 <strong>초기화, 제어, 보안 강화</strong> 등의 기능을 담당하며, <strong>플래시 메모리</strong>에 저장되어 업데이트를 통해 기능을 개선할 수 있다.</p>

<ul>
  <li><strong>스마트폰 펌웨어</strong>
    <ul>
      <li>카메라, 센서, 배터리 등 <strong>하드웨어 장치를 제어</strong>하고 운영체제와 연동한다.</li>
    </ul>
  </li>
  <li><strong>가전 제품</strong>
    <ul>
      <li>TV, 세탁기, 전자레인지 등에서는 펌웨어가 <strong>기능을 제어</strong>하고 <strong>UI 화면</strong>을 표시한다.</li>
    </ul>
  </li>
</ul>]]></content><author><name>Yundal</name><email>susu12356@gmail.com</email></author><category term="architecture" /><summary type="html"><![CDATA[하드웨어, 소프트웨어 그리고 펌웨어]]></summary></entry><entry><title type="html">[Minimal-Mistakes] github 블로그 만들기</title><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" title="[Minimal-Mistakes] github 블로그 만들기" /><published>2024-10-11T00:00:00+09:00</published><updated>2024-10-11T00:00:00+09:00</updated><id>http://localhost:4000/first-post</id><content type="html" xml:base="http://localhost:4000/blog/"><![CDATA[<h5 id="github-blog-서비스인-githubio-만들기">GitHub Blog 서비스인 github.io 만들기</h5>
<hr />
<p>처음에는 노션에다가 작성해오다가, 다른 플랫폼으로 옮기고 싶어서 velog를 만들었다.<br />
하지만 손이 자주 가지 않았고, 색다른 플랫폼을 사용해보고 싶었다. <br />
그러던 중 만들기 쉽지 않다는 GitHub Blog를 개설하고 싶다는 생각이 들어 도전하게 되었다.</p>

<p>블로그 사이트에 접속해서 글을 작성하면 되는 다른 플랫폼에 비해, 레포지토리를 만들어서 원하는 테마를 적용하고, 커스터마이징 하는 과정이 필요했다. 정말 쉽지 않았다.</p>

<p>그냥 기존이 사용하던 velog를 계속 사용할까 하는 생각이 정말 계속 들었지만, 한 번 끝을 보고 싶었다!</p>

<p>결과적으로 이렇게 성공적으로 블로그를 만들었는데 뿌듯하다. 
힘들게 만든 블로그인 만큼 손이 자주 갈 것 같다!</p>

<p>앞으로 노션, velog에 작성한 글들을 하나씩 옮겨오는 작업을 할 예정이다. 
시간이 좀 걸리겠지만, 블로그를 채워나갈 생각에 아주 기분이 좋다! 😎</p>

<p>참고한 사이트 :</p>
<blockquote>

  <p><a href="https://devinlife.com/howto/">취미로 코딩하는 개발자 </a><br />
<a href="https://github.com/mmistakes/minimal-mistakes">minimal-mistakes official github</a></p>
</blockquote>]]></content><author><name>Yundal</name><email>susu12356@gmail.com</email></author><category term="github-blog" /><summary type="html"><![CDATA[GitHub Blog를 만들어보았다.]]></summary></entry><entry><title type="html">[컴퓨터구조] 3. 캐시 메모리(Cache Memory)</title><link href="http://localhost:4000/architecture/cache" rel="alternate" type="text/html" title="[컴퓨터구조] 3. 캐시 메모리(Cache Memory)" /><published>2024-08-09T00:00:00+09:00</published><updated>2024-08-09T00:00:00+09:00</updated><id>http://localhost:4000/architecture/cache</id><content type="html" xml:base="http://localhost:4000/architecture/cache"><![CDATA[<h3 id="캐시-메모리cache-memory">캐시 메모리(Cache Memory)</h3>

<p>: CPU와 주 메모리 사이의 속도 차이를 줄이기 위해 CPU 내부 또는 CPU와 메모리 사이에 존재하는 고속 메모리이다. 자주 사용하는 데이터를 캐시 메모리에 저장하여 CPU가 데이터를 메모리에서 반복적으로 가져오는 과정을 줄인다.</p>

<p><strong>투명성</strong></p>

<p>캐시 메모리는 하드웨어 수준에서 동작하기에 캐시 메모리의 존재 유무가 하드웨어 성능에는 큰 영향을 주지만, 프로그램의 논리적 결과에는 영향을 미치지 않는다. 즉, 프로그래머가 직접 제어하지 않아도 자동으로 관리된다.
<br /><br /></p>

<p><strong>적중(hit)과 실패(fail)</strong><br />
캐시 메모리의 <strong>성능을 평가</strong>하는 중요한 개념이다.<br /><br /></p>

<p>➀ <strong>캐시 적중</strong> : 캐시 적중은 CPU가 요청한 데이터가 캐시 메모리에 존재하는 경우</p>

<table>
  <tr>
    <td><img src="../../assets/images/post/ar-03-1.jpeg" alt="ar-02-1.jpeg" style="width:130px;" /></td>
    <td>
      1. CPU가 특정 메모리 주소로 데이터를 요청.<br />
      ✔️ <strong>워드</strong> 연속되는 데이터의 일부분으로 CPU의 데이터 요청 단위.<br /><br />
      2. <strong>캐시 조회</strong><br />
      ➡️ 캐시 메모리가 요청된 데이터(워드)를 가지고 있으면 = <strong>적중(hit)</strong>.<br /><br />
      3. <strong>캐시 메모리 → CPU</strong><br />
      ➡️ 캐시 메모리는 데이터를 직접 CPU로 전송하여 메모리보다 빠르게 처리.
    </td>
  </tr>
</table>

<p>➁ <strong>캐시 실패 &amp; 메모리 적중 (Cache Miss &amp; Memory Hit)</strong></p>

<table>
  <tr>
    <td><img src="../../assets/images/post/ar-03-2.jpeg" alt="ar-02-1.jpeg" style="width:130px;" /></td>
    <td>
      1. <strong>캐시 조회</strong><br />
    ➡️ 캐시 메모리 해당 주소에 데이터 없다 = 실패 (fail)<br /><br />
      2.<strong>  캐시 → 메모리</strong><br />
      ➡️ 캐시 메모리가 요청된 데이터(워드)를 가지고 있으면 = <strong>적중(hit)</strong>.<br /><br />
      3. <strong>메모리 → 캐시</strong><br />
      ➡️ 캐시 메모리는 데이터를 직접 CPU로 전송하여 메모리보다 빠르게 처리.<br /><br />
        4. <strong>캐시에 해당 블록 저장</strong><br /><br />
     5. <strong>캐시 → CPU</strong><br />
      ➡️ CPU에게 워드 전달 
    </td>
  </tr>
</table>

<p>➂ <strong>캐시 실패 &amp; 메모리 실패</strong><br />
메인 메모리 보다 훨씬 큰 메모리가 필요할 때 → 보조기억장치 사용</p>

<table>
  <tr>
    <td><img src="../../assets/images/post/ar-03-3.jpeg" alt="ar-02-1.jpeg" style="width:130px;" /></td>
    <td>
      1. <strong>캐시 조회</strong><br />
    ➡️ 캐시 메모리 해당 주소에 데이터 없다. = 캐시 실패 (fail)<br /><br />
      2.<strong>  캐시 → 메모리</strong><br />
      ➡️         메인 메모리 주소에도 데이터 없다. = 메모리 실패(fail)<br /><br />
      <strong>🚨 페이지 폴트 발생(OS개입)</strong><br />
      OS가 개입하여 보조기억장치(HDD/SSD)에서 데이터를 페이지 단위로 메모리에 복사.<br /><br />
      3. <strong>보조기억장치 → 메모리</strong><br />
      ➡️ 필요한 데이터를 페이지(page)단위로 읽어와 메인 메모리에 저장<br /><br />
        4. <strong>메모리 → 캐시메모리</strong><br />
        ➡️ <strong>CPU가 요청한 데이터를 포함한 블록만</strong>캐시 메모리로 전송<br /><br />
     5. <strong>캐시메모리 → CPU  </strong> : CPU에게 워드 전달 
    </td>
  </tr>
</table>

<p><strong>캐시 성능 평가: 적중률과 실패율</strong></p>
<ul>
  <li>캐시 적중률(Hit Rate):
요청한 데이터가 캐시에 있는 비율
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>  적중률(%) = (캐시 적중 횟수 / 전체 요청 횟수) × 100
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>캐시 실패율(Miss Rate):
요청한 데이터가 캐시에 없는 비율
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>  실패율(%) = 100 - 적중률(%)
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<h3 id="브라우저-캐시"><strong>브라우저 캐시</strong></h3>

<p>브라우저 캐시는 “캐시”라는 개념의 웹 구현이라고 볼 수 있다. 캐시 메모리가 하드웨어 수준에서 CPU 성능 최적화를 위해 사용되는 것이라면, 브라우저 캐시는 소프트웨어적으로 웹 환경의 성능을 최적화 하기 위해 설계된 캐시의 한 종류이다.</p>

<p>브라우저 캐시는 웹 페이지를 로드할 때 자주 사용되는 데이터를 사용자의 로컬 디스크나 메모리에 저장되어, 웹 요청과 응답 사이의 속도를 최적화하는 역할을 한다.</p>

<p>동일한 리소스 (이미지, css파일, js 등)를 다시 요청할 경우, 서버로부터 다운로드 하지 않고 로컬 디스크에 저장된 캐시를 사용한다. 예를 들어, 웹 페이지 로드 시 반복되는 이미지나 css가 브라우저 캐시에 저장되어 빠르게 표시된다.</p>

<h4 id="브라우저-캐시-동작-방식">브라우저 캐시 동작 방식</h4>

<ul>
  <li>
    <p>처음 접속 시</p>

    <p>브라우저는 서버에서 이미지, CSS 파일, 자바스크립트(JS) 파일 등 페이지를 구성하는 다양한 리소스를 다운로드하여 사용자의 화면에 웹 페이지를 표시한다.</p>

    <p>동시에 이 리소스들을 <strong>로컬 저장소(브라우저 캐시)에 저장한다.</strong> 캐시는 브라우저에 따라 다르게 저장됩니다.</p>

    <ul>
      <li>Chrome: <code class="language-plaintext highlighter-rouge">chrome://cache/</code></li>
      <li>Firefox: <code class="language-plaintext highlighter-rouge">about:cache</code></li>
    </ul>

    <p><strong>저장 용량과 유지 기간</strong></p>

    <ul>
      <li>브라우저는 캐시에 저장 가능한 데이터 용량을 제한하고, 오래된 데이터는 자동으로 삭제되거나, 유효 기간이 끝난 후에 삭제한다. 예를 들어 사이트 로고 이미지를 업데이트했다면, 기존의 캐시된 이미지는 새 로고 이미지로 교체된다.
  <br /><br /></li>
    </ul>
  </li>
  <li>
    <p>다음 접속 시</p>

    <p>동일한 리소스를 서버에 요청하기 전에, 로컬 캐시에 저장된 리소스가 유효한지 확인한다.</p>

    <p>유효하다면, 로컬에 저장된 데이터를 사용하여 더 빠르게 웹페이지를 로드한다.</p>

    <p>유료하지 않다면, 해당 리소스들을 서버에서 다시 다운로드하고 캐시를 업데이트 한다. <br /><br /></p>

    <p><strong>유효한지 유효하지 않은 리소스인지 어떻게 판단하나?</strong></p>

    <p>브라우저는 캐시된 리소스의 유효성을 확인하기 위해서 서버와 통신하며 HTTP 헤더나 파일 메타 데이터를 활용한다. 이를 통해 리소스가 최신 버전인지 아닌지를 판단한다. <br /><br /></p>

    <p><strong>HTTP 캐시 메커니즘 :</strong></p>

    <p>HTTP의 캐시 제어 헤더를 사용하여 변경 여부를 확인한다. 주요 헤더는 다음과 같다. 
<br /><br /></p>
  </li>
</ul>

<ol>
  <li>
    <p><strong>Cache-Control</strong></p>

    <p>서버가 클라이언트(브라우저)에게 리소스의 캐시 정책을 전달한다. 예를 들어 리소스의 유효 기간을 설정한다.</p>

    <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre> <span class="nx">Cache</span><span class="o">-</span><span class="nx">Control</span> <span class="p">:</span> <span class="nx">max</span><span class="o">-</span><span class="nx">age</span><span class="o">=</span><span class="mi">86400</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <p>이 리소스는 24시간 동안 캐시할 수 있음을 의미하는 헤더 정보이다. 즉, 브라우저는 24시 동안은 서버로 확인 요청을 보내지 않고, 로컬 캐시를 사용한다.
 <br /><br /></p>
  </li>
  <li>
    <p><strong>ETag(Entity Tag)</strong></p>

    <p>리소스의 고유 식별자이다. 서버는 리소스의 내용을 기준으로 고유한 해시 값을 생성하여 ETag로 설정한다. 리소스가 번경되면 ETag 값도 변경된다.</p>

    <p>동작 방식:</p>

    <ol>
      <li>
        <p>첫 번째 요청</p>

        <p>브라우저가 리소스를 요청하면, 서버는 리소스를 반환하면서  ETag값을 생성하고 응답 헤더에 포함하여 보낸다.</p>

        <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre> <span class="nx">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">200</span> <span class="nx">OK</span>
 <span class="nx">ETag</span><span class="p">:</span> <span class="dl">"</span><span class="s2">xyz123</span><span class="dl">"</span>
 <span class="nx">Content</span><span class="o">-</span><span class="nx">Type</span><span class="p">:</span> <span class="nx">text</span><span class="o">/</span><span class="nx">css</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
      <li>
        <p>두 번째 요청</p>

        <p>브라우저는 ETag 값을 저장하고, 다음 요청 시, 브라우저는 “If-None-Match” 헤더에 저장된 ETag 값을 포함하여 요청을 보낸다.</p>

        <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre> <span class="nx">GET</span> <span class="o">/</span><span class="nx">styles</span><span class="p">.</span><span class="nx">css</span> <span class="nx">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
 <span class="nx">If</span><span class="o">-</span><span class="nx">None</span><span class="o">-</span><span class="nx">Match</span><span class="p">:</span> <span class="dl">"</span><span class="s2">xyz123</span><span class="dl">"</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
      <li>
        <p>서버 응답</p>

        <p><strong>서버는 클라이언트에서 보낸 ETag 값과 현재 리소스의 ETag 값을 비교한다.</strong></p>

        <ul>
          <li>일치한 경우 : “304 Not Modified”응답을 반환해준다. → 브라우저는 기존 캐시 사용</li>
          <li>불일치한 경우 : 새로운 리소스와 변경된 <strong>ETag 값을 전송한다.</strong>
 <br /><br /></li>
        </ul>
      </li>
    </ol>
  </li>
  <li>
    <p><strong>Last-Modified</strong></p>

    <p>리소스가 마지막으로 수정된 시간을 나타낸다.</p>

    <p>동작 방식 :</p>

    <ol>
      <li>
        <p>첫 번째 요청 시</p>

        <p>브라우저가 처음 리소스를 요청할 때, Last-Modified 값을 저장한다.</p>
      </li>
      <li>
        <p>다음 요청 시</p>

        <p>If-Modified-Since 헤더에 저장된 시간을 서버로 보낸다.</p>
      </li>
      <li>
        <p>서버 응답</p>

        <p>서버는 리소스의 수정 시간과 클라이언트가 보낸 If-Modified-Since 값을 비교한다.</p>

        <ul>
          <li>수정 시간이 더 이르면 : “200 OK”와 함께 새 리소스를 반환한다.</li>
          <li>수정 시간이 같거나 더 늦으면 :  “304 Not Modified”응답을 반환해준다. → 브라우저는 기존 캐시 사용한다.</li>
        </ul>
      </li>
    </ol>
  </li>
</ol>]]></content><author><name>Yundal</name><email>susu12356@gmail.com</email></author><category term="architecture" /><summary type="html"><![CDATA[캐시 메모리(Cache Memory)]]></summary></entry><entry><title type="html">[컴퓨터구조] 2.CPU 동작원리</title><link href="http://localhost:4000/architecture/cpu" rel="alternate" type="text/html" title="[컴퓨터구조] 2.CPU 동작원리" /><published>2024-08-08T00:00:00+09:00</published><updated>2024-08-08T00:00:00+09:00</updated><id>http://localhost:4000/architecture/cpu</id><content type="html" xml:base="http://localhost:4000/architecture/cpu"><![CDATA[<h3 id="cpu란">CPU란?</h3>

<p>CPU는 컴퓨터(서버)의 핵심 계산 장치이다. 컴퓨터 및 기타 스마트 장치는 데이터를 디지털 신호로 변환하고 이에 대한 수학적 연산을 수행한다. CPU는 이러한 신호를 처리하고 컴퓨팅을 가능하게 하며, 모든 컴퓨팅 장치의 두뇌 역할을 한다. 또한 운영체제 및 애플리케이션을 실행하는 데 필요한 모든 컴퓨팅 작업을 처리한다.</p>

<h3 id="cpu-구성요소">CPU 구성요소</h3>

<hr />

<p>🔽 가삼컴퓨터 AccCom의 CPU 구성</p>

<p><img src="../../assets/images/post/ar-02-1.jpeg" alt="ar-02-1.jpeg" style="width:500px;" /><br /></p>

<ol>
  <li>
    <p>제어장치 ⇒ 명령어를 해석한 결과에 따라 약속된 제어신호를 만들어 낸다.<br />
<strong>PC</strong>(Program Counter) 레지스터 : 다음 번에 실행할 명령어 주소 보관<br />
<strong>IR</strong>(Instruction Register)레지스터 : 현재 실행 중인 명령어 보관</p>
  </li>
  <li>
    <p>연산장치 (ALU)<br />
<strong>ACC</strong>(Accumulator): 누산기 ⇒ 연산결과를 임시저장</p>
  </li>
  <li>
    <p>메모리 인터페이스<br />
<strong>MAR(Memory Address Register)</strong> : 메모리에 엑세스 할 때, 필요한 주소를 적는 곳<br />
<strong>MBR(Memory Buffer Register)</strong> : 메모리에 읽거나 쓰려는 데이터 혹은 명령을 일시적으로 보관하는 곳<br />
 ⇒ 아키텍쳐에 따라서 생략 가능</p>
  </li>
</ol>

<p><br /></p>

<blockquote>
  <p>구성요소에 자세한 대한 정리는 <a href="https://www.notion.so/2bed00a4568e46bd830bdb4bcad8bb37?pvs=21">[컴퓨터의 구성]</a></p>
</blockquote>

<h3 id="cpu-동작-원리">CPU 동작 원리</h3>

<hr />

<p>CPU는 다른 하드웨어 구성요소 및 소프트웨어 프로그램과 함께 동작하여 데이터를 처리하고 여러 장치 내의 정보 흐름을 관리한다. 어떻게 관리할까? 간단하게 말하자면, CPU는 메모리에서 명령어를 가져와서 필요한 작업을 수행하고 출력을 다시 메모리로 보낸다. 자세한 명령어 처리과정은 다음과 같다:</p>

<dl>
  <dt><strong>명령어 처리 과정</strong></dt>
  <dd>
    <p>CPU는 명령어를 처리할 때, 명령어를 읽어오는 인출 사이클과 명령어를 실행하는 실행 사이클을 반복한다.</p>
  </dd>
</dl>

<ol>
  <li>
    <p><strong>인출 사이클(Instruction Fetch Cycle, Fetch Cycle)</strong></p>

    <p>: 실행할 명령어를 메모리에서 읽어 CPU로 가져오는 단계이다. 명령어는 CPU에 대한 특정 작업 또는 운영을 나타내는 이진 코드이다.</p>

    <ol>
      <li>
        <p><strong>PC 값 읽기</strong></p>

        <p>PC에 저장된 명령어의 메모리 주소를 MAR로 보낸다. 현재 PC는 실행해야 할 명령어의 주소르르 가리키고 있다.</p>
      </li>
      <li>
        <p><strong>MAT → 메모리 요청</strong></p>

        <p>MAR이 메모리에게 주소를 알려준다.</p>
      </li>
      <li><strong>제어신호가 메모리에게 읽기 신호(Read Signal)를 보낸다.</strong></li>
      <li>
        <p><strong>메모리 데이터 전송</strong></p>

        <p>메모리는 요청된 주소에 있는 데이터(=명령어)를 읽고,  데이터 버스를 통해  MBR에 저장한다.</p>
      </li>
      <li>
        <p><strong>MBR → IR저장</strong></p>

        <p>MBR에 저장된 명령어를 IR로 복사하여 저장한다.</p>
      </li>
      <li><strong>PC 값을 갱신하여 다음 명령어 주소로 갱신한다.</strong> 예) PC = PC + 2
<br />
<br /></li>
    </ol>
  </li>
  <li>
    <p><strong>실행 사이클(Execution Cycle)</strong> : IR에 저장된 명령어를 실행하는 단계이다. 명령어에 따라서 실행 과정이 다르다. 아래는 [LDA 310]를 실행하는 흐름이다. 해당 명령어는 주소 310의 데이터를 로드하라는 명령이다.</p>
    <ol>
      <li>
        <p><strong>IR해석</strong></p>

        <p>IR에 저장된 명령어[LDA 310]를 해석한다.</p>
      </li>
      <li>
        <p><strong>MAR 갱신</strong></p>

        <p>명령어에 포함되어 있는 메모리주소(310)를 MAR에 저장(지정)한다.</p>
      </li>
      <li><strong>제어신호가 읽기 신호 보낸다.</strong></li>
      <li>
        <p><strong>데이터 로드</strong></p>

        <p>메모리는 해당 주소의 데이터를 읽어 MBR에 저장한다.</p>
      </li>
      <li><strong>ACC 저장</strong></li>
      <li><strong>MBR에 저장한 데이터를 누산기(ACC)에 저장</strong>한다. 해당 데이터는 이후 연산이나 결과 처리를 위해 데이터를 활용할 수 있다.</li>
    </ol>
  </li>
</ol>

<blockquote>
  <p>참조 https://aws.amazon.com/ko/what-is/cpu/</p>
</blockquote>]]></content><author><name>Yundal</name><email>susu12356@gmail.com</email></author><category term="architecture" /><summary type="html"><![CDATA[CPU란?]]></summary></entry></feed>